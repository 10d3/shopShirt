// Database configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// USER MODEL
model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  phone          String?         @unique // Needed for local payment matching
  emailVerified  DateTime?
  image          String?
  role           Role            @default(User)
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  authenticators Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ORDER MODEL
model Order {
  id           String        @id @default(uuid())
  userId       String?
  user         User?         @relation(fields: [userId], references: [id])
  phone        String? // Used to match local payments if user is not registered
  status       String        @default("pending") // pending, processing, shipped, delivered
  totalAmount  Decimal
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  items        OrderItem[]
  verification Verification?
}

// ORDER ITEM MODEL
model OrderItem {
  id                 String  @id @default(uuid())
  orderId            String
  order              Order   @relation(fields: [orderId], references: [id])
  productId          String
  productName        String
  productDescription String?
  productImage       String?
  digitalAssetUrl    String?
  quantity           Int
  price              Decimal
}

// PAYMENT VERIFICATION MODEL (for local payments)
model Verification {
  id            String  @id @default(cuid())
  txd           String  @unique // Transaction ID from SMS
  amount        Float
  sender        String // Phone number sending the payment
  paymentMethod String // Stripe, USSD, etc.
  status        String  @default("pending") // pending, success, unmatched
  orderId       String? @unique
  order         Order?  @relation(fields: [orderId], references: [id])
}

// ACCOUNT MODEL (For OAuth & Stripe)
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// SESSION MODEL (For Authentication)
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// EMAIL VERIFICATION
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// OPTIONAL: WEB AUTHENTICATION SUPPORT
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// USER ROLES ENUM
enum Role {
  User
  Admin
}
